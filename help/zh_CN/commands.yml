# Commands
blockbuster:
    commands:
        # General commands
        scene:
            |
            {l}{6}/{r}scene {8}<play|toggle|stop|loop>{r} {7}<名称> [flag]{r}

            {r}开始，停止，或调整场景 {7}<名称>{r}. 此外，还有 {7}loop{r} 可以让您使用 {7}[flag]{r} 参数（{7}true{r} 或 {7}false{r}）更改循环的功能。

        # Record's commands
        record:
            help: "{r}{o}录制命令{r}。该命令提供一些次级命令用于处理玩家回放动作。"
            
            add: 
                |
                    {l}{6}/{r}record {8}add{r} {7}<文件名> <tick> <动作类型> [数据标签]{r}
                    
                    {r}通过在时间点为 {7}<tick>{r} 时，向玩家回放 {7}<文件名>{r} 添加类别为 {7}<动作类型>{r} 的动作，并在 {7}[数据标签]{r} 中指定其他附加的数据。
 
            calculate_body_yaw:
                |
                    {l}{6}/{r}record {8}calculate_body_yaw{r} {7}<文件名>{r}

                    {r}自动计算给定玩家回放的偏航值{r}。

            camera:
                |
                    {l}{6}/{r}record {8}camera{r} {7}<文件名> <相机配置> [x] [y] [z]{r}

                    {r}使用来自服务端的 {7}<相机配置>{r} 的数据，生成一个新的（或更新现有的）名为 {7}<文件名>{r} 的玩家回放。也可以提供可选的偏移量 {7}[x]{7}、{7}[y]{7} 和 {7}[z]{7}，这些偏移量将通过给定的 XYZ 偏移量移动回放的位置。
           
            clean:
                |
                    {l}{6}/{r}record {8}clean{r} {7}<文件名> <属性> [值] [起始] [结束]{r}
                    
                    {r}该命令会清除玩家回放 {7}<文件名>{r} 中，从 {7}[起始]{r} Tick 到 {7}[结束]{r}（不包含 {7}[结束]{r}）Tick，直到 [值] 参数中指定的值（允许使用绝对值），或到帧 [起始]，或第一帧中，指定的 {7}<属性>{r}。
            
            cut:
                |
                    {l}{6}/{r}record {8}cut{r} {7}<文件名> <前> <后>{r}

                    {r}该命令会删除玩家回放 {7}<文件名>{r} 中，{7}<前>{r} 与 {7}<后>{r} 之间的动作（{7}<起始时间>{r} 和 {7}<结束时间>{r} 参数，是不包括前置和后置延迟的）。
            
            dupe:
                |
                    {l}{6}/{r}record {8}dupe{r} {7}<文件名> <新文件名>{r}
                    
                    {r}该命令会将玩家回放 {7}<文件名>{r} 复制一份到名为 {7}<新文件名>{r} 的新玩家回放。

            erase:
                |
                    {l}{6}/{r}record {8}erase{r} {7}<文件名> <帧数> <起始时间>{r}

                    {r}该命令会删除玩家回放 {7}<文件名>{r} 中从 {7}<起始时间>{r} Tick 起的 {7}<帧数>{r} 动作。

            fade:
                |
                    {l}{6}/{r}record {8}fade{r} {7}<文件名> <淡出>{r}

                    {r}该命令会使用线性插值，淡出玩家回放 {7}<文件名>{r} 中，时长为 {7}<淡出>{r} Tick 到第一帧之间的动画。
            
            fill:
                |
                    {l}{6}/{r}record {8}fill{r} {7}<文件名> <帧数> [tick]{r}

                    {r}该命令会在玩家回放 {7}<文件名>{r} 的第 {7}[tick]{r} 处插入 {7}<帧数>{f} 帧。若未给出 {7}[tick]{r} 参数，该命令会在玩家回放的最后延长 {7}[tick]{f}。

            flip:
                |
                    {l}{6}/{r}record {8}flip{r} {7}<文件名> <轴:X|Z> <坐标> [中心点]{r}

                    {r}该命令会将玩家回放 {7}<文件名>{r} 中的帧和动作，沿给定的 {7}<轴>{r} 和 {7}<坐标>{r} 翻转。如果您要在方块为偶数厚度的墙面实现镜像效果，请将 {7}[中心点]{r} 设为 {7}false{r}（默认是 {7}true{r}）。
            
            get:
                |
                    {l}{6}/{r}record {8}get{r} {7}<文件名> <tick>{r}
                    
                    {r}输出玩家回放 {7}<文件名>{r} 文件中，在 {7}<tick>{r} 处找到的动作数据。
            
            info:
                |
                    {l}{6}/{r}record {8}info{r} {7}<文件名>{r}
                    
                    {r}输出关于文件名为 {7}<文件名>{r} 的玩家回放数据，例如已保存的录制版本，录制时长等。
            
            remove:
                |
                    {l}{6}/{r}record {8}remove{r} {7}<文件名> <tick> [index]{r}
                    
                    {r}删除玩家回放 {7}<文件名>{r} 中，{7}<tick>{r} 上的的所有动作。如果您指定了 {7}[index]{r}，该命令只会移除在 {7}[index]{r} 处，{7}<tick>{r} 上的一个动作。

            remove_body_yaw:
                |
                    {l}{6}/{r}record {8}remove_body_yaw{r} {7}<文件名>{r}

                    {r}从给定的玩家回放中移除身体偏航属性。

            rename:
                |
                    {l}{6}/{r}record {8}rename{r} {7}<文件名> <新文件名>{r}

                    {r}该命令会将给定的名为 {7}<文件名>{r} 的玩家回放重新命名为 {7}<新文件名>{r}。如果回放存在先前版本，该命令也会对前几个版本的回放 <文件名> 进行重命名。

            restore:
                |
                    {l}{6}/{r}record {8}restore{r} {7}<文件名> <迭代数>{r}

                    {r}将名为 {7}<文件名>{r} 的玩家回放文件恢复到最近的第 {7}<迭代数>{r} 版本。例如，{7}/record restore test 1{r} 会交换 {7}test.dat{r} 与 {7}test.dat~1{r} 玩家回放文件的位置。
            
            reverse:
                |
                    {l}{6}/{r}record {8}reverse{r} {7}<文件名>{r}

                    {r}倒转名为 {7}<文件名>{r} 的玩家回放中的帧和动作。
        
            search:
                |
                    {l}{6}/{r}record {8}search{r} {7}<文件名> <动作类型> [限制] [输出标签]{r}
                    
                    {r}在玩家回放 {7}<文件名>{r} 中搜索动作给定的 {7}<动作类型>{r} 动作，可选择用 {7}[限制]{r} 进行限制，然后输出 Tick 时间，可选择输出哪些数据标签。
                    
            origin:
                |
                    {l}{6}/{r}record {8}origin{r} {7}<文件名> [旋转角度] [x] [y] [z]{r}
                    
                    {r}该命令会根据 {7}[x] [y] [z]{r}（如果三个都指定了）来改变玩家回放的原点（第一帧），或者取玩家当前的位置。您也可以将玩家回放的内容相对于第一帧在 Y 轴上进行旋转。

            process:
                |
                    {l}{6}/{r}record {8}process{r} {7}<文件名> <属性> <起始时间> <结束时间> <数学表达式>{r}

                    {r}该命令会处理玩家回放 {7}<文件名>{r} 从 {7}<起始时间>{r} Tick 到 {7}<结束时间>{r} 中给定的 {7}<属性>{r}，并应用给定的 {7}<数学表达式>{r} 表达式。以下是可用的变量:

                    {7}initial{r} - 给定属性的初始值
                    {7}value{r} - 给定属性的当前值
                    {7}tick{r} - 当前在处理的帧的 Tick
                    {7}from{r} - {7}<起始时间>{r} 参数
                    {7}to{r} - {7}<结束时间>{r} 参数
                    {7}factor{r} - {7}起始时间{r} 和 {7}结束时间{r} 之间的表达式进行处理的距离是 (0..1)，它的公式基本上是 {7} (tick - from) / (to - from){r}

            prolong:
                |
                    {l}{6}/{r}record {8}prolong{r} {7}<文件名> [末尾延迟] [起始延迟]{r}
                    
                    {r}该命令可以调整给定的玩家回放 {7}<文件名>{r} 的前后延迟。
                                
            tp:
                |
                    {l}{6}/{r}record {8}tp{r} {7}<文件名> [tick]{r}
                    
                    {r}该命令会传送玩家到名为玩家回放 {7}<文件名>{r} 的第一帧或指定的第 {7}[tick]{r} 帧处。

        # Model's commands
        model:
            help: "{r}{o}模型命令{r}。该命令提供一些次级命令用于管理自定义模型。"
            
            export:
                |
                    {l}{6}/{r}model {8}export{r} {7}<实体名称>{r}
                    
                    {r}以 JSON 格式导出来自 {7}<实体名称>{r} 生物渲染群的模型，该格式用于演员所使用的自定义模型。模型将会导出在 Blockbuster 的 config 文件夹的 export 文件夹。您可以选择提供 {7}[实体标签]{r} 来导出具有特定数据的实体生成模型。
                    
                    {r}{l}注意{r}: 这些自动生成的模型不完美，您需要在 McME 进一步编辑获得最佳效果。

            export_obj:
                |
                    {l}{6}/{r}model {8}export_obj{r} {7}<模型名称> [姿势]{r}
                    
                    {r}将名为 {7}<模型名称>{r} 的 Blockbuster JSON 模型转换为 OBJ 模型（包括默认材质，以及如果存在的 MTL 文件）。导出的 OBJ 模型可以在 Blockbuster 的配置文件夹中的 {l}export{r} 文件夹内找到。
                    
            clear:
                |
                    {l}{6}/{r}model {8}clear{r} {7}[路径]{r}
                    
                    {r}清除加载的 Blockbuster 皮肤材质的材质缓存。如果指定了 {7}[路径]{r}，该命令只会清理来自 {7}[路径]{r} 的材质。

            clear_structures:
                |
                    {l}{6}/{r}model {8}clear_structures{r}

                    {r}清除结构伪装缓存，并重新加载所有的结构。

            combine:
                |
                    {l}{6}/{r}model {8}combine{r} {7}<目标|导出路径...>{r}

                    {r}将 {7}<目标路径>{r} （即相对路径 {7}config/blockbuster/models/{r}）中的所有皮肤合并为单个皮肤，并将合并结果导出至 {7}config/blockbuster/export/{r} （{7}<导出路径>{r} 为可选参数）。

            convert:
                |
                    {l}{6}/{r}model {8}convert{r} {7}<steve|fred> <皮肤>{r}
                    
                    {r}转换一个名为 {7}<皮肤>{r}（文件名不包括文件的扩展名 {7}<steve|fred>{r} 模型）的 64x64（{7}fred{r}）皮肤到 64x32，或从 64x32（{7}steve{r}）转换到 64x64 的皮肤。
            
            reload:
                |
                    {l}{6}/{r}model {8}reload{r} {7}[强制]{r}
                    
                    {r}强制客户端和服务器使用可选的 {7}[强制]{r} 参数重载模型（服务器端仅 OP 用户可用），若参数为 {7}true{r}，则会重载所有超过缓存的非修改文件时间戳的模型。
                    
            report:
                |
                    {l}{6}/{r}model {8}report{r}
                    
                    {r}该命令会创建一个关于哪些模型和皮肤存在，以及哪些由 Minecraft 加载的报告，并将其复制到剪贴板。此命令仅用于协助目的。

        # Action's commands
        action:
            help: "{r}{o}动作命令{r}。本命令提供一些次级命令管理玩家回放内容动作。"

            append:
                |
                    {l}{6}/{r}action {8}append{r} {7}<文件名> <偏移量> [场景]{r}

                    {r}将当前玩家的动作从给定的 {7}<文件名>{r} 玩家回放中的第 {7}<偏移量>{r} tick 处进行覆盖录制。你也可以选择指定 {7}[场景]{r} 名称，会有助于您进行演员同步。

            clear:
                |
                    {l}{6}/{r}action {8}clear{r}
                    
                    {r}移除客户端上所有的回放内容（用于强制卸载客户端上的回放）。
            play: 
                |
                    {l}{6}/{r}action {8}play{r} {7}[无敌] [伪装NBT标签]{r}
                    
                    {r}播放玩家回放 {7}<文件名>{r} 及其的动作。 其中的次级命令还可接受可选的 {7}[无敌]{r}、{7}[伪装NBT标签]{r}（可用于指定伪装）参数，以及标签（标签可以用 {7}1{r}，{7}0{r}，{7}true{r} 或 {7}false{r} 表示）。
            record: 
                |
                    {l}{6}/{r}action {8}record{r} {7}<文件名> [场景]{7}
                    
                    {r}将当前玩家的动作录制到玩家回放 {7}<文件名>{r} 中。您也可以指定 {7}[场景]{r}。提供场景名称，用于同步演员。
            request: 
                |
                    {l}{6}/{r}action {8}request{r} {7}<文件名>{r}
                    
                    {r}请求将名为 <文件名> 的动作从服务器加载到当前客户端。
            stop: 
                |
                    {l}{6}/{r}action {8}stop{r}
                    
                    {r}停止录制动作。若玩家没有录制任何动作，什么都不会发生。
        
        on_head.help: "{r}{o}戴在头上命令{r}。该命令可以将当前主手拿着的物品直接放入头上的物品槽，无需受任何 NBT 标签的困扰。"
        item_nbt.help:
            |
                {l}{6}/{r}item_nbt {7}<give 命令>{r}{r}

                {r}物品 NBT 命令用于将当前手持物品的 NBT 标签复制到剪贴板。如果你在 {7}<give 命令>{r} 提供了 {7}true{r} 或 {7}1{r} 参数，就会一个合适的 {7}/give{r} 命令到剪贴板用于获得这个物品。你很可能需要一个命令方块来执行复制过来命令...

        damage.help:
            |
                {l}{6}/{r}damage {7}<实体> <数量>{r}

                {r}对 {7}<实体>{r} 造成 {7}<amount>{r} 的伤害。若 {7}<数量>{r} 为负数，则所有被目标选择器匹配到的 {7}<实体>{r} 将会被治愈。

        spectate.help: 
            |
                {r}{o}观察者命令{r}。该命令可以让指定玩家附身至指定实体的视角上。
                
                {l}{6}/{r}spectate {8}<player>{r} {7}<entity>{r}

        modelblock:
            help: "{r}{o}模型方块命令{r}。该命令可以让你通过命来令编辑模型方块。"

            morph:
                |
                    {l}{6}/{r}modelblock {8}morph{r} {7}<x> <y> <z> [伪装NBT标签]{r}

                    {r}将位于 {7}<x>{r}, {7}<y>{r}, {7}<z>{r} 处的模型方块中的伪装替换为 {7}[伪装NBT标签]{r}。

            property:
                |
                    {l}{6}/{r}modelblock {8}property{r} {7}<x> <y> <z> <属性:enabled> <值>{r}

                    {r}将位于 {7}<x>{r}, {7}<y>{r}, {7}<z>{r} 处的模型方块的 {7}<属性>{r} 属性改为 {7}<值>{r}。