# Commands
blockbuster:
    commands:
        # General commands
        scene: "{r}Start, stop or toggle playback of scene by {7}<name>{r}. There is also {7}loop{r} which allow to change looping with {7}[flag]{r} argument ({7}true{r} or {7}false{r})."

        # Record's commands
        record:
            help: "{r}{o}Record command{r}. This command provides few sub-commands for manipulating player recording actions."
            
            add: "{r}Adds an action to player recording by {7}<filename>{r} at {7}<tick>{r} of type {7}<action_type>{r} with additional data specified in {7}[data_tag]{r}."
            apply: "{r}Applies {7}<source>{r}'s frames list of {7}<properties>{r} (can be separated by {7},{r}) on {7}<target>{r} player recording. Optionally you can specify whether frame properties will be applied {7}[relative]{r} (by default absolutely), and you can specify the range from {7}[from]{r} to {7}[to]{r} ticks.\n\nAdditionally special types like {7}head"
            calculate_body_yaw: "{r}Automatically calculates body yaw for given player recording{r}."
            camera: "{r}Generates a new (or updates exisitng) player recording named {7}<filename>{r} using the the data from server side {7}<camera_profile>{r}. Optional offset {7}[x]{r}, {7}[y]{r} and {7}[z]{r} can be provided that will shift the position by given XYZ offset."
            clean: "{r}This command cleans given {7}<property>{r} in {7}<filename>{r} player recording from {7}[from]{r} tick to {7}[to]{r} (not including {7}[to]{r}) tick to the value specified either in {7}[value]{r} argument (it accepts relative values) or the value at frame {7}[from]{r} or the first frame."
            create: "{r}This command creates a player recording named {7}<filename>{r} with {7}<duration>{r} frames. {7}[x]{r}, {7}[y]{r}, {7}[z]{r}, {7}[yaw]{r}, and {7}[pitch]{r} can be optionally specified to override current sender's position and rotation (relative {7}~{r} values are supported)."
            cut: "{r}This command removes all actions in player recording {7}<filename>{r} before {7}<before>{r} and after {7}<after>{r} (pre and post delays shouldn't be taken into account giving {7}<from>{r} and {7}<to>{r} arguments)."
            dupe: "{r}This command duplicates given {7}<filename>{r} player recording to a new player recording file with given {7}<new_filename>{r}. {7}[overwrite]{r} is {7}false{r} by default, specify {7}true{r} if you want to overwrite an existing recording"
            erase: "{r}This command removes {7}<count>{r} actions in player recording {7}<filename>{r} starting at tick {7}<from>{r}."
            fade: "{r}This command fades out {7}<filename>{r} player recording to the first frame using linear interpolation that fades {7}<fade_out>{r} ticks."
            fill: "{r}This command inserts {7}<count>{f} frames at {7}[tick]{f} in {7}<filename>{r} player recording. If {7}[tick]{r} is not provided, it would use the length of given player recording."
            flip: "{r}This command flips frames and actions of {7}<filename>{r} player recording across given {7}<axis>{r} at given {7}<coordinate>{r}. Set {7}[center]{r} to {7}false{r} (by default it's {7}true{r}) if you're mirroring across even number of blocks thick wall."
            get: "{r}Outputs data tag of action found at {7}<tick>{r} in player recording by filename {7}<filename>{r}."
            info: "{r}Outputs information about player recording by filename {7}<filename>{r}, such as saved version of record format, length of the record, etc."
            origin: "{r}This command changes the origin (the first frame) of the player recording according to {7}[x] [y] [z]{r} (if all three were specified) or player's current position. You might also rotate the player recording across Y axis relative to its first frame."
            process:
                |
                    {r}This command processes given {7}<property>{r} in {7}<filename>{r} player recording from {7}<from>{r} tick to {7}<to>{r} and applies given {7}<math>{r} expression. Following variables are available:

                    {7}initial{r} - initial value of given property
                    {7}value{r} - current value of given property
                    {7}tick{r} - currently processing frame's tick
                    {7}from{r} - {7}<from>{r} argument
                    {7}to{r} - {7}<to>{r} argument
                    {7}factor{r} - how far into the processing the expression between {7}from{r} and {7}to{r} is (0..1), the formula for it is basically {7}(tick - from) / (to - from){r}

            prolong: "{r}This command allows to specify a pre and post delay for given {7}<filename>{r} player recording."
            remove: "{r}Removes all actions on {7}<tick>{r} in player recording by {7}<filename>{r}. If you'll specify {7}[index]{r}, command will remove only one action in {7}<tick>{r} at {7}[index]{r}. {7}[index]{r} of -1 deletes all actions in {7}<tick>{r}. If you specify {7}[force]{r} as true, you'll skip confirmation process."
            remove_modal: "Are you sure you want to remove the actions at the given tick?"
            delete: "{r}Deletes the recording file by {7}<filename>{r}. If you specify {7}[force]{r} as true, you'll skip confirmation process."
            delete_modal: "Are you sure you want to delete the \"%s\" recording file?"
            remove_body_yaw: "{r}Removes body yaw properties from given player recording."
            rename: "{r}This command renames given {7}<filename>{r} player recording to a new name {7}<new_filename>{r}. It also renames past versions of the {7}<filename>{r} player recording, if there are any."
            restore: "{r}Restores previous version {7}<iteration>{r} of a player recording by name {7}<filename>{r}. For example {7}/record restore test 1{r} will swap {7}test.dat{r} and {7}test.dat~1{r} player recording files places."
            reverse: "{r}Reverses the order of frames and actions in the player recording by name {7}<filename>{r}."
            search: "{r}Searches for actions, optionally limited by {7}[limit]{r}, of given {7}<action_type>{r} and outputs the tick and, optionally output data tag, found in player recording by filename {7}<filename>{r}."
            tp: "{r}This command teleports player to first frame or frame at {7}[tick]{r} frame, if specified, {7}<filename>{r} player recording."

        # Model's commands
        model:
            help: "{r}{o}Model command{r}. This command provides sub-commands for managing custom models."

            clear: "{r}Clears the texture cache from loaded Blockbuster's skin textures. If {7}[path]{r} specified, the command will only clear the textures which begins with {7}[path]{r}."
            clear_structures: "{r}Clears the structure morphs cache and reloads all of the structures."
            combine: "{r}Creates combination of textures specified in {7}<paths...>{r} (relative to {7}config/blockbuster/models/{r}) into single skins, and exports them to {7}config/blockbuster/export/{r}."
            convert: "{r}Converts a skin {7}<skin>{r} (name filename without extension in {7}<steve|fred>{r} model) 64x64 ({7}fred{r}) to 64x32 or 64x32 ({7}steve{r}) to 64x64 skin."
            export:
                |
                    {r}Exports model from {7}<entity_name>{r} mob renderer in JSON format that actor use for custom models. This model will be exported into export folder of Blockbuster's config folder. Optionally you can provide {7}[entity_tag]{r} to generate a model from entity with specific data.

                    {r}{l}Attention{r}: those models are automatically generated and aren't perfect. You'll need to adjust those models in McME to get best result.

            export_obj: "{r}Converts Blockbuster JSON model named {7}<model_name>{r} to OBJ (along side with default texture, if present, and MTL file). Exported OBJ model can be found in Blockbuster's config {l}export{r} folder."
            reload: "{r}Forces the client and server to reload models (server-side only for OP users) with optional {7}[force]{r} argument which if is {7}true{r} will reload all models surpassing cached non-modified files timestamp."
            report: "{r}This command creates a report about which models and skins are present, and which loaded by Minecraft, and copies it to the copy-paste buffer. This command is for assistance purposes only."

        # Action's commands
        action:
            help: "{r}{o}Action command{r}. This command provides few sub-commands for managing player recording actions."

            append: "{r}Records an action from current player into given {7}<filename>{r} with {7}<offset>{r} tick which will overwrite given frames after given offset tick. You can also optionally specify {7}[scene]{r} name. Supplying scene name, helps out with synchronizing the actors."
            cancel: "{r}Cancels currently recording action."
            clear: "{r}Removes all records on the client (used to force unload client-side records)."
            play: "{r}Playbacks an action from given {7}<filename>{r}. This sub-command also can receive optional arguments {7}[invincibility]{r} flag ({7}1{r}, {7}0{r}, {7}true{r} or {7}false{r} values) and {7}[morph_nbt]{r} (which allows to specify a morph)."
            record: "{r}Records an action from current player into given {7}<filename>{r}. You can also optionally specify {7}[scene]{r} name. Supplying scene name, helps out with synchronizing the actors."
            request: "{r}Requests an action, named {7}<filename>{r}, to be loaded from server to current client."
            stop: "{r}Stops the recording of action. If the player didn't record anything, nothing will happen."
        
        on_head.help: "{r}{o}On head command{r}. This command allows putting currently held item in the main slot directly in the head slot, without any hassle of coming up with NBT data tag."
        item_nbt.help: "{r}Item NBT command allows to copy current held item's NBT tag to the clipboard. If you provide {7}<give_command>{r} as {7}true{r} or {7}1{r} it will copy to clipboard a proper {7}/give{r} command to give that item. You'll most likely need a command block for that..."
        damage.help: "{r}Inflicts {7}<amount>{r} damage to {7}<entity>{r}. If {7}<amount>{r} is negative then all {7}<entity>{r} matched by target selector will be healed."
        spectate.help: "{r}{o}Spectate command{r}. This command allows making given {7}<player>{r} to spectate given {7}<entity>{r}."
        mount.help: "{r}{o}Mount command{r}. This command allows making given {7}<target>{r} entity to mount a given {7}[destination]{r} entity. If {7}[destination]{r} is omitted, then the {7}<target>{r} will be dismounted.\n\nMake sure there are only one entity that is qualifies for {7}<target>{r} and {7}[destination]{r} target selectors!"

        modelblock:
            help: "{r}{o}Model block command{r}. This command allows editing model blocks through commands."

            morph: "{r}Changes morph to {7}[morph_nbt]{r} of a model block at {7}<x>{r}, {7}<y>{r}, {7}<z>{r}."
            property: "{r}Changes model block property {7}<property>{r} to {7}<value>{r} of a model block at {7}<x>{r}, {7}<y>{r}, {7}<z>{r}."